import random
from kivy.app import App
from kivy.uix.widget import Widget
from kivy.graphics import Color, Rectangle, Line
from kivy.uix.label import Label
from kivy.uix.floatlayout import FloatLayout
from kivy.uix.button import Button
from kivy.core.window import Window
from kivy.animation import Animation
from kivy.uix.popup import Popup
from kivy.clock import Clock


# Utility for handling rank comparisons
RANK_MAP = {'A': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9, '10': 10, 'J': 11, 'Q': 12, 'K': 13}

# Card Class representing each card
class Card:
    def __init__(self, rank, suit):
        self.rank = rank
        self.suit = suit
        self.is_face_up = False

    def flip(self):
        self.is_face_up = not self.is_face_up

    def is_red(self):
        return self.suit in ['H', 'D']

    def rank_value(self):
        return RANK_MAP[self.rank]


# Deck Class representing a deck of cards
class Deck:
    suits = ['H', 'D', 'C', 'S']
    ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']

    def __init__(self):
        self.cards = [Card(rank, suit) for suit in self.suits for rank in self.ranks]
        self.shuffle()

    def shuffle(self):
        random.shuffle(self.cards)

    def deal_card(self):
        return self.cards.pop() if self.cards else None


# Solitaire Game Logic (separated from UI)
class Solitaire:
    def __init__(self):
        self.deck = Deck()
        self.waste_pile = []
        self.tableau = [[] for _ in range(7)]
        self.foundation = [[] for _ in range(4)]
        self.deal_initial_tableau()
        self.undo_stack = []
        self.foundation_widgets = []
        self.tableau_widgets = []

    def deal_initial_tableau(self):
        """Deal the initial cards to the tableau."""
        for col in range(7):
            for row in range(col, 7):
                card = self.deck.deal_card()
                if not card:
                    raise ValueError("Deck is empty! Cannot deal more cards.")
                self.tableau[row].append(card)
                if row == col:
                    card.flip()

    def deal_from_deck(self):
        """Deal a card from the deck to the waste pile."""
        self.save_game_state()
        if self.deck.cards:
            card = self.deck.deal_card()
            card.flip()
            self.waste_pile.append(card)
        else:
            print("Deck is empty! Cannot deal from deck.")

    def move_to_foundation(self, card, foundation_index):
        """Move a card to the foundation if the move is valid."""
        if self.is_valid_foundation_move(card, foundation_index):
            self.save_game_state()
            self.foundation[foundation_index].append(card)
            return True
        return False

    def is_valid_foundation_move(self, card, foundation_index):
        """Check if the card can be moved to the foundation."""
        foundation_pile = self.foundation[foundation_index]
        if not foundation_pile:
            return card.rank == 'A'
        top_card = foundation_pile[-1]
        return card.suit == top_card.suit and card.rank_value() == top_card.rank_value() + 1

    def is_valid_move(self, from_card, to_card):
        """Check if moving a card from one pile to another is valid."""
        if to_card is None:
            return from_card.rank == 'K'
        return (from_card.is_red() != to_card.is_red() and 
            from_card.rank_value() == to_card.rank_value() - 1)
    
    def save_game_state(self):
        """Saves the current game state to the undo stack."""
        state = {
            "deck": self.deck.cards[:],
            "waste_pile": self.waste_pile[:],
            "tableau": [pile[:] for pile in self.tableau],
            "foundation": [pile[:] for pile in self.foundation],
        }
        self.undo_stack.append(state)

    def undo(self):
        """Undo the last move and resets to the last save state."""
        if self.undo_stack:
            state = self.undo_stack.pop()
            self.deck.cards = state["deck"]
            self.waste_pile = state["waste_pile"]
            self.tableau = state["tableau"]
            self.foundation = state ["foundation"]
            self.setup_tableau()
            self.refresh_waste_pile()
            self.refresh_foundation()

    def is_game_won(self):
        """Check if the game is won."""
        return all(len(pile) == 13 for pile in self.foundation)
    
    def update_tableau(self):
        """Update card positions in the tableau."""
        card_width, card_height = 80, 120
        padding = 20
        y_offset = 150
        for i, pile in enumerate(self.tableau):
            for j, card in enumerate(pile):
                if j < len(self.tableau_widgets[i].cards):
                    card_widget = self.tableau_widgets[i].cards[j]
                    card_widget.pos = (padding + i * (card_width + padding), Window.height - y_offset - j * 30)
                    card_widget.original_pos = card_widget.pos

class FoundationWidget(Widget):
    def __init__(self, foundation_index, game, **kwargs):
        super().__init__(**kwargs)
        self.foundation_index = foundation_index
        self.game = game
        self.cards = []  # Holds the card widgets in this foundation
        self.size_hint = (None, None)
        self.size = (80, 120)
        with self.canvas:
            Color(1, 1, 1, 1)  # Default background color
            self.rect = Rectangle(pos=self.pos, size=self.size)

        self.bind(pos=self._update_rect, size=self._update_rect)

    def add_card(self, card_widget):
        """Adds a card to the foundation visually and in the game logic."""
        if self.game.move_to_foundation(card_widget.card, self.foundation_index):
            self.cards.append(card_widget)
            self.add_widget(card_widget)
            self.update_cards()
            return True
        return False

    def _update_rect(self, *args):
        """Update the visual representation of the foundation when its size or position changes."""
        self.rect.pos = self.pos
        self.rect.size = self.size

    def update_cards(self):
        """Update the visual positions of the cards in the foundation."""
        for i, card_widget in enumerate(self.cards):
            card_widget.pos = (self.x, self.y + i * 2)  # Stacks the cards slightly

class TableauWidget(Widget):
    def __init__(self, tableau_index, game, **kwargs):
        super().__init__(**kwargs)
        self.tableau_index = tableau_index
        self.game = game
        self.cards = []
        self.size_hint = (None, None)
        self.size = (80, 120)
        with self.canvas:
            Color(0, 1, 0, 1)
            self.rect = Rectangle(pos=self.pos, size=self.size)
        self.bind(pos=self._update_rect, size=self._update_rect)

    def add_card(self, card_widget):
        """Adds a card to the tableau visually and in the mage logic."""
        to_card = self.cards[-1].card if self.cards else None

        if self.game.is_valid_move(card_widget.card, to_card):
            self.game.save_game_state()

            if card_widget.is_waste:
                self.game.waste_pile.remove(card_widget.card)
                self.game.refresh_waste_pile()
            else:
                original_tableau = self.game.tableau[card_widget.tableau_index]
                original_tableau.remove(card_widget.card)

            self.game.tableau[self.tableau_index].append(card_widget.card)
            self.cards.append(card_widget)
            self.add_widget(card_widget)
            self.update_cards()

            if original_tableau and not original_tableau[-1].is_face_up:
                original_tableau[-1].flip()
                self.game.update_tableau()
            
            return True
        return False
    
    def _update_rect(self, *args):
        self.rect.pos = self.pos
        self.rect.size = self.size

    def update_cards(self):
        for i, card_widget in enumerate(self.cards):
            card_widget.pos = (self.x, self.y - i * 30)
            card_widget.original_pos = card_widget.pos

# CardWidget representing each card in the UI
class CardWidget(Widget):
    def __init__(self, card, tableau_index, game, is_waste=False, **kwargs):
        super().__init__(**kwargs)
        self.card = card
        self.tableau_index = tableau_index
        self.game = game
        self.is_waste = is_waste
        self.size_hint = (None, None)
        self.size = (80, 120)
        self.is_being_dragged = False
        self.drag_offset = (0, 0)
        self.original_pos = self.pos
        Clock.schedule_once(self.set_initial_pos)
        self.bind(on_touch_down=self.on_touch_down)
        self.draw_card()

    def set_initial_pos(self, *args):
        self.original_pos = self.pos

    def draw_card(self):
        self.canvas.clear()
        self.clear_widgets()
        with self.canvas:
            if self.card.is_face_up and self.card.is_red():
                Color(1, 0, 0, 1)
            elif self.card.is_face_up:
                Color(0, 0, 0, 1)
            else:
                Color(0.5, 0.5, 0.5, 1)
            Rectangle(pos=self.pos, size=self.size)
            Color(0, 0, 0, 1) 
            Line(rectangle=(self.x, self.y, self.width, self.height), width=1)
            Color(1, 1, 1, 1)
            Line(rectangle=(self.x + 2, self.y + 2, self.width - 4, self.height - 4), width=2)

        if self.card.is_face_up:
            if not hasattr(self, 'label'):
                self.label = Label(text=f"{self.card.rank}{self.card.suit}", 
                                   color=(0, 0, 1, 1),
                                   size_hint=(None, None), 
                                   size=(80, 30))
                self.add_widget(self.label)
            self.label.center = self.center
        else:
            if hasattr(self, 'label'):
                self.remove_widget(self.label)
                del self.label

    def on_touch_down(self, touch, *args):
        """Handle touch events for dragging cards."""
        if self.collide_point(*touch.pos):
            self.is_being_dragged = True
            self.original_pos = self.pos
            self.drag_offset = (self.x - touch.x, self.y - touch.y)
            return True
        return super().on_touch_down(touch, *args)

    def on_touch_move(self, touch, *args):
        """Move the card based on touch movements."""
        if self.is_being_dragged:
            new_x = touch.x + self.drag_offset[0]
            new_y = touch.y + self.drag_offset[1]
            self.pos = (max(0, min(new_x, Window.width - self.width)), max(0, min(new_y, Window.height - self.height)))
            # Update label position
            if hasattr(self, 'label'):
                self.label.center = self.center
            return True
        return super().on_touch_move(touch, *args)

    def on_touch_up(self, touch, *args):
        """Handle card release after dragging."""
        if self.is_being_dragged:
            self.is_being_dragged = False

            # Check if the card is being dropped onto a foundation pile
            for foundation in self.game.foundation_widgets:
                if self.collide_widget(foundation):
                    if foundation.add_card(self):  # Try to add card to foundation
                        return True
                    
            for tableau in self.game.tableau_widgets:
                if self.collide_widget(tableau):
                    if tableau.add_card(self):
                        tableau.game.refresh_waste_pile()
                        return True

            # Revert to original position if no valid move
            anim = Animation(pos=self.original_pos, duration=0.2)
            anim.start(self)
            return True
        return super().on_touch_up(touch, *args)



# Main App UI Logic
class SolitaireAppUI(Widget):
    def __init__(self, **kwargs):
        super(SolitaireAppUI, self).__init__(**kwargs)
        self.game = Solitaire()
        self.setup_game_ui()

    def setup_game_ui(self):
        """Setup foundation, tableau, and deck button."""
        self.setup_tableau()
        self.setup_foundation()
        self.setup_deck_button()
        undo_button = Button(text="Undo", size_hint=(None, None), size=(100,50), pos=(20,80))
        undo_button.bind(on_press=self.undo_last_move)
        self.add_widget(undo_button)

    def undo_last_move(self, instance):
        self.game.undo()
        self.game.update_tableau()
        self.refresh_waste_pile()
        self.refresh_foundation()

    def setup_foundation(self):
        """Initialize foundation UI elements."""
        card_width, card_height = 80, 120
        padding = 20
        foundation_y = Window.height - card_height - 20

        self.foundation_widgets = []
        for i in range(4):
            foundation_widget = FoundationWidget(i, self.game)
            foundation_widget.size = (card_width, card_height)
            foundation_widget.pos = (padding + i * (card_width + padding), foundation_y)
            self.foundation_widgets.append(foundation_widget)
            self.add_widget(foundation_widget)
            self.game.foundation_widgets = self.foundation_widgets

    def setup_tableau(self):
        """Initialize tableau UI elements."""
        card_width, card_height = 80, 120
        padding = 20
        y_offset = 150

        for i, pile in enumerate(self.game.tableau):
            tableau_widget = TableauWidget(i, self.game)
            tableau_widget.pos = (padding + i * (card_width + padding), Window.height - 300)
            self.game.tableau_widgets.append(tableau_widget)
            self.add_widget(tableau_widget)

            for j, card in enumerate(pile):
                card_widget = CardWidget(card, i, self.game)
                card_widget.pos = (padding + i * (card_width + padding), Window.height - y_offset - j * 30)
                tableau_widget.cards.append(card_widget)
                self.add_widget(card_widget)

    def setup_deck_button(self):
        """Create the deck button for drawing cards."""
        button = Button(text="Draw Card", size_hint=(None, None), size=(100, 50), pos=(20, 20))
        button.bind(on_press=self.deal_from_deck)
        self.add_widget(button)

    def deal_from_deck(self, *args):
        """Deal a card from the deck and refresh waste pile."""
        self.game.deal_from_deck()
        self.refresh_waste_pile()

    def refresh_waste_pile(self):
        """Update the waste pile display."""
        # Remove old waste pile widgets
        for child in self.children[:]:
            if isinstance(child, CardWidget) and child.is_waste:
                self.remove_widget(child)
        # Redraw new waste pile
        for i, card in enumerate(self.game.waste_pile):
            card_widget = CardWidget(card, None, self.game, is_waste=True)
            card_widget.pos = (150 + i * 20, 20)
            self.add_widget(card_widget)

    def refresh_foundation(self):
        for foundation_widget in self.foundation_widgets:
            foundation_widget.clear_widgets()
            foundation_widget.update_cards()

# Main App Class
class SolitaireApp(App):
    def build(self):
        return SolitaireAppUI()


if __name__ == '__main__':
    SolitaireApp().run()
